[{"C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\index.js":"1","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\mergeSort.js":"2","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\heapSort.js":"3","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\insertionSort.js":"4"},{"size":6402,"mtime":1605840647339,"results":"5","hashOfConfig":"6"},{"size":1903,"mtime":1605247402548,"results":"7","hashOfConfig":"6"},{"size":1283,"mtime":1605341812052,"results":"8","hashOfConfig":"6"},{"size":599,"mtime":1605247571453,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"hxpot4",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\index.js",["21","22","23","24"],"import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { performInsertionSort } from \"./sorting-codes/insertionSort.js\";\r\nimport { performMergeSort } from \"./sorting-codes/mergeSort.js\";\r\nimport { performHeapSort } from \"./sorting-codes/heapSort.js\";\r\n\r\n/*\r\nName: SortButton\r\nDescription : This class supports a react component for the buttons used in \r\n\t\t\tsorting and reset.\r\n\t\t\tAll buttons \"Insertion Sort\", \"Merge Sort\", \"Heap Sort\" and \"Reset\"\r\n\t\t\tuse this class as a React Component\r\n*/\r\nclass SortButton extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<button \r\n\t\t\t\tclassName=\"SortButton\"\r\n\t\t\t\tonClick={() => this.props.onClick()}>\r\n\t\t\t\t{this.props.value}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n}\r\n//\r\n/*\r\nName: Bar\r\nDescription: This class serves as the react component for the each individual bar\r\n\t\t\tin the displayed chart used to visualize sorting.\r\n\t\t\tThis class further impletements the color gradient used in the bars. \r\n\t\t\tIt takes the height as input of the bar and bases the color on height,\r\n\t\t\thigher the bar, darker the color.\r\n*/\r\nclass Bar extends React.Component{\r\n\trender(){\r\n\r\n\t\tvar a = this.props.height;\r\n\t\tvar b = 67339; // 0x1070B\r\n\t\tvar c = (b*a)/30; \r\n\t\tvar e = 5831134 - c; // 0x58F9DE - (0x1070B)*hex(a)\r\n\t\tvar f = e.toString(16);\r\n\t\tconst styles= {\r\n\t\t\tbuttonStyle: {\r\n\t\t\t\tbackgroundColor: '#'+f,\r\n\t\t\t\theight:this.props.height+\"px\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treturn(\r\n\t\t\t<button className=\"bar1\" style={styles.buttonStyle}></button>\r\n\t\t);\r\n\t}\r\n}\r\n//\r\n/*\r\nName: EverythingGrid\r\nDescription: This class, as the name suggests, serves as a base for almost everything.\r\n\t\t\tThis is where rendering in react starts. It contains all the web-elements,\r\n\t\t\tuses above classes, and further calls additional class for different types\r\n\t\t\tof sorting.\r\n*/\r\nclass EverythingGrid extends React.Component {\r\n\r\n\t/* constructor for EverythingGrid\r\n\t   constructor defines three state variables:\r\n\t   \t\t* array: randomly generated array\r\n\t   \t\t* html: array converted to a array of react components\r\n\t   \t\t* output_array: array optimized for display\r\n\t*/\r\n\tconstructor(props) {\r\n\t\t\r\n\t\tsuper(props);\r\n\r\n\t\tvar randomArray = this.randomArray(); // random array generator function\r\n\t\t// converting the integer array to a react component array for rendering sake\r\n\t\tvar randomHtml = this.convertArrayToReactArray(randomArray);\r\n\t\tvar randomOutputArray = [randomHtml]; // array optimized into two dimensional array for display purposes\r\n\r\n\t\t// setting the three state variables with our generated value\r\n\t\tthis.state = {\r\n\t\t\tarray: randomArray,\r\n\t\t\thtml: randomHtml,\r\n\t\t\toutputArray: randomOutputArray,\r\n\t\t};\r\n\t}\r\n\r\n\t// random array generator function\r\n\trandomArray(){\r\n\t\t// generates array of length 30, with random integers from 0 to 20\r\n\t\treturn Array.from({length: 30}, () => Math.floor(Math.random() * 20));\r\n\t}\r\n\r\n\t// converts the provided integer array to an array of react components.\r\n\tconvertArrayToReactArray(inputArray){\r\n\t\tvar output = [];\r\n\t\t// returns an array with \"this.renderBar\" added in front of each element of the integer array\r\n\t\tfor (var i=0; i< inputArray.length; i++){\r\n\t\t\toutput.push(this.renderBar(inputArray[i]*30));\r\n\t\t} \r\n\t\treturn output; // array of react components\r\n\t}\r\n\r\n\t// function to start Insertion Sort\r\n\trenderInsertionSort(){\r\n\r\n\t\tvar insertionOutput = performInsertionSort(this.state.array.slice());\r\n\t\tvar updatedState = [], tempArray = [];\r\n\r\n\t\tfor (var i=0; i< insertionOutput.length; i++){\t\r\n\t\t\t\r\n\t\t\ttempArray = this.convertArrayToReactArray(insertionOutput[i]);\r\n\t\t\tupdatedState.push(tempArray);\r\n\t\t}\r\n\t\treturn updatedState;\r\n\t}\r\n\t\r\n\t// function to start Merge Sort\r\n\trenderMergeSort(){\r\n\t\t\r\n\t\tvar toBeSorted = this.state.array.slice();\r\n\t\tvar mergeOutput = performMergeSort(toBeSorted);\r\n\t\tvar updatedState = [], tempArray = [];\r\n\r\n\t\tfor (var i=0; i< mergeOutput.length; i++){\t\r\n\t\t\ttempArray = this.convertArrayToReactArray(mergeOutput[i]);\r\n\t\t\tupdatedState.push(tempArray);\r\n\t\t}\r\n\t\treturn updatedState;\r\n\t}\r\n\r\n\t// function to start Heap Sort\r\n\trenderHeapSort(){\r\n\t\t\r\n\t\tvar toBeSorted = this.state.array.slice();\r\n\t\tvar heapOutput = performHeapSort(toBeSorted);\r\n\t\tvar updatedState = [], tempArray = [];\r\n\r\n\t\tfor (var i=0; i< heapOutput.length; i++){\t\t\r\n\t\t\ttempArray = this.convertArrayToReactArray(heapOutput[i]);\r\n\t\t\tupdatedState.push(tempArray);\r\n\t\t}\r\n\t\treturn updatedState;\r\n\t}\r\n\r\n\t// Reset Function to reset the display to a new array.\r\n\trenderReset(){\r\n\r\n\t\tvar array = this.randomArray();\r\n\t\tvar html = this.convertArrayToReactArray(array);\r\n\t\tvar outputArray = [html];\r\n\t\t\r\n\t\tthis.setState({array: array, html: html, outputArray:outputArray,});\r\n\t}\r\n\r\n\t// Function to choose the sort-type based on button selection\r\n\thandleClick(type){\r\n\r\n\t\tvar outputArray = [];\r\n\t\t\t\t\r\n\t\tif (type == \"Insertion Sort\"){\r\n\t\t\toutputArray = this.renderInsertionSort();\r\n\t\t} else if (type == \"Merge Sort\"){\r\n\t\t\toutputArray = this.renderMergeSort();\r\n\t\t} else if (type == \"Reset\"){\r\n\t\t\toutputArray.push(this.state.html);\r\n\t\t\tthis.renderReset();\r\n\t\t} else{\r\n\t\t\toutputArray = this.renderHeapSort();\r\n\t\t}\r\n\t\tthis.setState({outputArray: outputArray,});\r\n\t}\r\n\r\n\trenderButton(type){\r\n\t\treturn (\r\n\t\t\t<SortButton \r\n\t\t\t\tvalue = {type}\r\n\t\t\t\tonClick= {() => this.handleClick(type)}/>\r\n\t\t);\r\n\t}\r\n\trenderBar(height){\r\n\t\treturn <Bar height = {height}/>\r\n\t}\r\n\trender() {\r\n\t\tconst welcome = \"Sorting Visualizer\";\r\n\t\t\r\n\t\tconst Text = () => {\r\n  \t\t\tvar work = this.state.outputArray.slice();\r\n  \t\t\tconst [seconds, setSeconds] = useState(0);\r\n  \t\t\tuseEffect(() => {\r\n    \t\t\tconst interval = setInterval(() => {\r\n      \t\t\t\tsetSeconds((second) => (second === (work.length-1) ? (work.length-1) : second + 1));\r\n    \t\t\t}, 150);\r\n\r\n    \t\treturn () => clearInterval(interval);\r\n  \t\t\t}, []);\r\n\r\n  \t\t\tuseEffect(() => {\r\n    \t\tconsole.log(\"seconds\", seconds);\r\n  \t\t\t}, [seconds]);\r\n  \t\t\treturn (\r\n    \t\t\t<div>\r\n      \t\t\t\t<h1>{work[seconds]}</h1>\r\n    \t\t\t</div>\r\n  \t\t\t);\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<div className=\"all\">\r\n\t\t\t\t<div className=\"welcome\">{welcome}</div>\r\n\t\t\t\t<div className = \"sort-types\">\r\n\t\t\t\t\t{this.renderButton(\"Insertion Sort\")}\r\n\t\t\t\t\t{this.renderButton(\"Merge Sort\")}\r\n\t\t\t\t\t{this.renderButton(\"Heap Sort\")}\r\n\t\t\t\t\t{this.renderButton(\"Reset\")}\r\n\t\t\t\t</div>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<span className = \"all-bars\">\r\n\t\t\t\t\t<Text />\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nReactDOM.render(\r\n  <EverythingGrid />,\r\n  document.getElementById('root')\r\n);",["25","26"],"C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\mergeSort.js",["27"],"export function performMergeSort(toBeSorted){\r\n\r\n\tvar updatedState = [];\r\n\r\n\tvar temp = new Array(30).fill(0);\r\n\t\t\r\n\tvar output = merge_sort(updatedState, toBeSorted, temp, 0, temp.length-1);\r\n\t\t\r\n\tupdatedState = output[0];\r\n\ttoBeSorted = output[1];\r\n\r\n\treturn updatedState;\r\n}\r\n\r\nfunction merge_sort_helper(updatedState, toBeSorted, temp, left, mid, right){\r\n\t\t\r\n\tvar leftStart = left, leftEnd = mid, rightStart = mid+1, rightEnd = right;\r\n\tvar array_size = rightEnd - leftStart + 1;\r\n\tvar index = leftStart;\r\n\r\n\twhile ((leftStart <= leftEnd) && (rightStart <= rightEnd)){\r\n\t\tif (toBeSorted[leftStart] <= toBeSorted[rightStart]){\r\n\t\t\t\r\n\t\t\ttemp[index] = toBeSorted[leftStart];\r\n\t\t\tleftStart = leftStart + 1;\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttemp[index] = toBeSorted[rightStart];\r\n\t\t\trightStart = rightStart + 1;\r\n\t\t}\r\n\t\tindex = index + 1\r\n\t}\r\n\r\n\twhile (leftStart <= leftEnd){\r\n\t\ttemp[index] = toBeSorted[leftStart];\r\n\t\tindex = index + 1;\r\n\t\tleftStart = leftStart + 1;\r\n\t}\r\n\twhile (rightStart <= rightEnd){\r\n\t\ttemp[index] = toBeSorted[rightStart];\r\n\t\tindex = index + 1;\r\n\t\trightStart = rightStart + 1;\r\n\t}\r\n\r\n\tfor (var i = left; i <= right; i++){\r\n\t\ttoBeSorted[i] = temp[i]\r\n\t}\r\n\r\n\tvar test = [];\t\t\r\n\tfor (var k=0; k<toBeSorted.length; k++){\r\n\t\ttest.push(toBeSorted[k])\r\n\t}\r\n\r\n\tupdatedState.push(test);\r\n\treturn [updatedState, toBeSorted];\r\n}\r\n\r\nfunction merge_sort(updatedState, toBeSorted, temp, left, right){\r\n\r\n\tif (( (left >= 0) && (right < toBeSorted.length) )  && (left < right)){\r\n\r\n\t\tvar mid = Math.floor((left+right)/2);\r\n\r\n\t\tvar output = merge_sort(updatedState, toBeSorted, temp, left, mid);\r\n\t\tupdatedState = output[0];\r\n\t\ttoBeSorted = output[1];\r\n\t\toutput = merge_sort(updatedState, toBeSorted, temp, mid+1, right);\r\n\t\tupdatedState = output[0];\r\n\t\ttoBeSorted = output[1];\r\n\r\n\t\treturn merge_sort_helper(updatedState, toBeSorted, temp, left, mid, right);\r\n\t}else{\r\n\t\treturn [updatedState, toBeSorted]\r\n\t}\r\n}","C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\heapSort.js",["28"],"C:\\Users\\Reecha\\Desktop\\Projects\\Sorting Visualizer\\react-sorting-visualizer\\src\\sorting-codes\\insertionSort.js",[],{"ruleId":"29","severity":1,"message":"30","line":161,"column":12,"nodeType":"31","messageId":"32","endLine":161,"endColumn":14},{"ruleId":"29","severity":1,"message":"30","line":163,"column":19,"nodeType":"31","messageId":"32","endLine":163,"endColumn":21},{"ruleId":"29","severity":1,"message":"30","line":165,"column":19,"nodeType":"31","messageId":"32","endLine":165,"endColumn":21},{"ruleId":"33","severity":1,"message":"34","line":196,"column":9,"nodeType":"35","endLine":196,"endColumn":11,"suggestions":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":18,"column":6,"nodeType":"43","messageId":"44","endLine":18,"endColumn":16},{"ruleId":"45","severity":1,"message":"46","line":55,"column":7,"nodeType":"43","messageId":"47","endLine":55,"endColumn":13},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'work.length'. Either include it or remove the dependency array.","ArrayExpression",["48"],"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'array_size' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'output' is already defined.","redeclared",{"desc":"51","fix":"52"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [work.length]",{"range":"53","text":"54"},[5746,5748],"[work.length]"]